generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum StateType {
  backlog
  unstarted
  started
  completed
  cancelled
}

enum AssigneeType {
  internalUser
  client
  company
}

enum ActivityType {
  TASK_CREATED
  TASK_ASSIGNED
  WORKFLOW_STATE_UPDATED
}

model WorkflowState {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId String    @db.VarChar(32)
  type        StateType
  name        String    @db.VarChar(255)
  key         String    @db.VarChar(255)
  color       String?   @db.VarChar(32)
  tasks       Task[]
  deletedAt   DateTime?

  @@unique([workspaceId, key], name: "UQ_WorkflowStates_workspaceId_key")
  @@index([workspaceId, key], name: "IX_WorkflowStates_workspaceId_key")
  @@map("WorkflowStates")
}

model Task {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String        @db.VarChar(32)
  assigneeId      String?       @db.Uuid
  assigneeType    AssigneeType?
  title           String        @db.VarChar(255)
  body            String?
  createdById     String        @db.Uuid
  workflowState   WorkflowState @relation(fields: [workflowStateId], references: [id], onDelete: Cascade)
  workflowStateId String        @db.Uuid
  attachments     Attachment[]
  activityLog     ActivityLog[]
  comments        Comment[]

  assignedAt  DateTime?
  completedAt DateTime?
  dueDate     DateTime?
  deletedAt   DateTime?

  @@map("Tasks")
}

enum ViewMode {
  board
  list
}

model TaskTemplate {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId  String    @db.VarChar(32)
  templateName String    @db.VarChar(255)
  title        String    @db.VarChar(255)
  body         String?
  createdById  String    @db.Uuid
  deletedAt    DateTime?

  @@unique([workspaceId, templateName], name: "UQ_TaskTemplates_workspaceId_templateName")
  @@index([workspaceId, templateName], name: "IX_TaskTemplates_workspaceId_templateName")
  @@map("TaskTemplates")
}

model ViewSetting {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  viewMode    ViewMode  @default(board)
  workspaceId String    @db.VarChar(32)
  deletedAt   DateTime?

  @@unique([userId, workspaceId], name: "UQ_ViewSettings_userId_workspaceId")
  @@index([userId, workspaceId], name: "IX_ViewSettings_userId_workspaceId")
  @@map("ViewSettings")
}

model Attachment {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task        Task?     @relation(fields: [taskId], references: [id])
  taskId      String?   @db.Uuid
  comment     Comment?  @relation(fields: [commentId], references: [id])
  commentId   String?   @db.Uuid
  workspaceId String    @db.VarChar(32)
  filePath    String
  fileSize    Int
  fileType    String
  fileName    String
  createdById String    @db.Uuid
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?

  @@unique([filePath], name: "UQ_Attachments_filePath")
  @@index([filePath], name: "IX_Attachments_filePath")
  @@map("Attachments")
}

model ActivityLog {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  taskId      String       @db.Uuid
  task        Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  workspaceId String       @db.VarChar(32)
  type        ActivityType
  details     Json         @db.JsonB
  userId      String       @db.Uuid
  createdAt   DateTime     @default(now()) @db.Timestamptz()
  updatedAt   DateTime     @updatedAt @ignore @db.Timestamptz()

  @@index([createdAt])
  @@index([taskId], name: "IX_ActivityLogs_taskId")
  @@index([userId], name: "IX_ActivityLogs_userId")
  @@map("ActivityLogs")
}

model Comment {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  initiator   String
  initiatorId String       @db.Uuid
  parentId    String?      @db.Uuid
  parent      Comment?     @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  children    Comment[]    @relation("ChildComments")
  taskId      String       @db.Uuid
  task        Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  workspaceId String       @db.VarChar(32)
  attachments Attachment[]
  createdAt   DateTime     @default(now()) @db.Timestamptz()
  updatedAt   DateTime     @updatedAt @db.Timestamptz()
  deletedAt   DateTime?    @db.Timestamptz()

  @@map("Comments")
}
