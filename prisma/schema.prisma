generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum StateType {
  backlog
  unstarted
  started
  completed
  cancelled
}

enum AssigneeType {
  internalUser
  client
  company
}

model WorkflowState {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId          String                 @db.VarChar(32)
  type                 StateType
  name                 String                 @db.VarChar(255)
  key                  String                 @db.VarChar(255)
  color                String?                @db.VarChar(32)
  tasks                Task[]
  deletedAt            DateTime?
  prevWorkflowState    WorkflowStateTracker[] @relation("RL_WorkflowStateTracker_prev_workflowState")
  currentWorkflowState WorkflowStateTracker[] @relation("RL_WorkflowStateTracker_current_workflowState")

  @@unique([workspaceId, key], name: "UQ_WorkflowStates_workspaceId_key")
  @@index([workspaceId, key], name: "IX_WorkflowStates_workspaceId_key")
  @@map("WorkflowStates")
}

model Task {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId     String        @db.VarChar(32)
  assigneeId      String?       @db.Uuid
  assigneeType    AssigneeType?
  title           String        @db.VarChar(255)
  body            String?
  createdById     String        @db.Uuid
  workflowState   WorkflowState @relation(fields: [workflowStateId], references: [id], onDelete: Cascade)
  workflowStateId String        @db.Uuid
  attachments     Attachment[]
  activityLog     ActivityLog[]

  assignedAt  DateTime?
  completedAt DateTime?
  dueDate     DateTime?
  deletedAt   DateTime?

  @@map("Tasks")
}

enum ViewMode {
  board
  list
}

model TaskTemplate {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId  String    @db.VarChar(32)
  templateName String    @db.VarChar(255)
  title        String    @db.VarChar(255)
  body         String?
  createdById  String    @db.Uuid
  deletedAt    DateTime?

  @@unique([workspaceId, templateName], name: "UQ_TaskTemplates_workspaceId_templateName")
  @@index([workspaceId, templateName], name: "IX_TaskTemplates_workspaceId_templateName")
  @@map("TaskTemplates")
}

model ViewSetting {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  viewMode    ViewMode  @default(board)
  workspaceId String    @db.VarChar(32)
  deletedAt   DateTime?

  @@unique([userId, workspaceId], name: "UQ_ViewSettings_userId_workspaceId")
  @@index([userId, workspaceId], name: "IX_ViewSettings_userId_workspaceId")
  @@map("ViewSettings")
}

model Attachment {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task        Task      @relation(fields: [taskId], references: [id])
  taskId      String    @db.Uuid
  workspaceId String    @db.VarChar(32)
  filePath    String
  fileSize    Int
  fileType    String
  fileName    String
  createdById String    @db.Uuid
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?

  @@unique([filePath], name: "UQ_Attachments_filePath")
  @@index([filePath], name: "IX_Attachments_filePath")
  @@map("Attachments")
}

model ActivityLog {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime              @default(now())
  taskId               String                @db.Uuid
  workspaceId          String                @db.VarChar(32)
  activityType         ActivityType
  createTaskTracker    CreateTaskTracker?
  assigneeTracker      AssignTracker?
  workflowStateTracker WorkflowStateTracker?
  task                 Task                  @relation(fields: [taskId], references: [id])

  @@index([createdAt])
  @@map("ActivityLogs")
}

model CreateTaskTracker {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activityLogId String      @unique @db.Uuid
  createdBy     String
  createdById   String      @db.Uuid
  activityLog   ActivityLog @relation(fields: [activityLogId], references: [id])
}

model AssignTracker {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activityLogId String      @unique @db.Uuid
  initiator     String
  initiatorId   String      @db.Uuid
  assignedTo    String
  assignedToId  String      @db.Uuid
  activityLog   ActivityLog @relation(fields: [activityLogId], references: [id])
}

model WorkflowStateTracker {
  id                     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  activityLog            ActivityLog    @relation(fields: [activityLogId], references: [id])
  activityLogId          String         @unique @db.Uuid
  initiator              String
  initiatorId            String         @db.Uuid
  prevWorkflowStateId    String?        @db.Uuid
  currentWorkflowStateId String         @db.Uuid
  prevWorkflowState      WorkflowState? @relation(name: "RL_WorkflowStateTracker_prev_workflowState", fields: [prevWorkflowStateId], references: [id])
  currentWorkflowState   WorkflowState  @relation(name: "RL_WorkflowStateTracker_current_workflowState", fields: [currentWorkflowStateId], references: [id])
}

enum ActivityType {
  CREATE_TASK
  ASSIGN_TASK
  WORKFLOWSTATE_UPDATE
}
